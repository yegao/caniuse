[ { content:
    '# Banner广告\n\n### qg.createBannerAd(Object object) `1031+`\n\n> 1031标准开始支持，低版本需做兼容处理。\n\n创建 banner 广告组件。请通过 qg.getSystemInfoSync() 返回对象的 platformVersionCode判断标准版本号 >= 1031后再使用该 API。请直接在真机上进行调试。\n\n#### 参数\n\nObject object\n\n| 属性  | 类型   | 必填 | 说明                                       |\n| :---- | :----- | :--- | :----------------------------------------- |\n| posId | String | 是   | 广告位id                                   |\n| style | Object | 否   | banner广告组件的样式，具体字段后续版本开放 |\n\n#### 返回值\n\nBannerAd 广告组件\n\n#### 示例\n\n```js\n//style内无需设置任何字段，banner会在屏幕底部居中显示，style具体属性后续版本会开放\nvar bannerAd = qg.createBannerAd({\n    posId: \'xxxx\',\n    style: {}\n});\n```\n\n### BannerAd.hide()\n\n隐藏banner广告\n\n##### 参数\n\n无\n\n##### 示例\n\n```javascript\nbannerAd.hide();\n```\n\n### BannerAd.show()\n\n显示banner广告\n\n##### 参数\n\n无\n\n##### 示例\n\n```javascript\n//banner广告隐藏后使用show可以重新显示\nbannerAd.show();\n```\n\n### BannerAd.destroy()\n\n销毁banner广告\n\n##### 参数\n\n无\n\n##### 示例\n\n```javascript\nbannerAd.destroy();\n```\n\n### BannerAd.onLoad(function callback)\n\n监听banner广告加载结束事件\n\n#### 参数\n\n| 参数名   | 类型     | 必填 | 说明               |\n| -------- | -------- | ---- | ------------------ |\n| callback | Function | 是   | 监听事件的回调函数 |\n\n### BannerAd.offLoad(function callback)\n\n取消监听banner广告加载结束事件\n\n#### 参数\n\n| 参数名   | 类型     | 必填 | 说明               |\n| -------- | -------- | ---- | ------------------ |\n| callback | Function | 否   | 需要取消的监听回调 |\n\n#### 示例\n\n```js\nvar func = function () {\n  // do something\n};\n// 开始监听\nbannerAd.onLoad(func);\n// 取消监听\nbannerAd.offLoad(func);\n```\n\n### BannerAd.onClose(function callback)\n\n监听banner广告关闭事件\n\n#### 参数\n\n| 参数名   | 类型     | 必填 | 说明               |\n| -------- | -------- | ---- | ------------------ |\n| callback | Function | 是   | 监听事件的回调函数 |\n\n### BannerAd.offLoad(function callback)\n\n取消监听banner广告关闭事件\n\n#### 参数\n\n| 参数名   | 类型     | 必填 | 说明               |\n| -------- | -------- | ---- | ------------------ |\n| callback | Function | 否   | 需要取消的监听回调 |\n\n#### 示例\n\n```js\nvar func = function () {\n  // do something\n};\n// 开始监听\nbannerAd.onClose(func);\n// 取消监听\nbannerAd.offClose(func);\n```\n\n### BannerAd.onError(function callback)\n\n监听banner广告错误事件\n\n#### 参数\n\n| 参数名   | 类型     | 必填 | 说明               |\n| -------- | -------- | ---- | ------------------ |\n| callback | Function | 是   | 监听事件的回调函数 |\n\n##### Object res\n\n| 参数名  | 类型   | 说明     |\n| ------- | ------ | -------- |\n| errMsg  | String | 错误信息 |\n| errCode | number | 错误码   |\n\n### BannerAd.offError(function callback)\n\n取消监听banner广告错误事件\n\n#### 参数\n\n| 参数名   | 类型     | 必填 | 说明               |\n| -------- | -------- | ---- | ------------------ |\n| callback | Function | 否   | 需要取消的监听回调 |\n\n#### 示例\n\n```js\nvar func = function () {\n  // do something\n};\n// 开始监听\nbannerAd.onError(func);\n// 取消监听\nbannerAd.offError(func);\n```\n\n### BannerAd.onSize(function callback)\n\n监听banner广告真实宽高尺寸事件\n\n#### 参数\n\n| 参数名   | 类型     | 必填 | 说明               |\n| -------- | -------- | ---- | ------------------ |\n| callback | Function | 是   | 监听事件的回调函数 |\n\n##### Object res\n\n| 参数名 | 类型   | 说明           |\n| ------ | ------ | -------------- |\n| width  | number | banner真实宽度 |\n| height | number | banner真实高度 |\n\n### BannerAd.offSize(function callback)\n\n取消监听banner广告真实宽高尺寸事件\n\n#### 参数\n\n| 参数名   | 类型     | 必填 | 说明               |\n| -------- | -------- | ---- | ------------------ |\n| callback | Function | 否   | 需要取消的监听回调 |\n\n#### 示例\n\n```js\nvar func = function () {\n  // do something\n};\n// 开始监听\nbannerAd.onLoad(func);\n// 取消监听\nbannerAd.offLoad(func);\n```' },
 { content:
    '# 插屏广告\n### qg.createInterstitialAd(Object object) `1031+`\n\n\n> 1031标准开始支持，低版本需做兼容处理。\n\n创建插屏广告。请通过 qg.getSystemInfoSync() 返回对象的 platformVersionCode判断标准版本号 >= 1031后再使用该 API。请直接在真机上进行调试。\n\n#### 参数\n\nObject object\n\n| 属性  | 类型   | 必填 | 说明     |\n| :---- | :----- | :--- | :------- |\n| posId | String | 是   | 广告位id |\n\n#### 返回值\n\nInterstitialAd  广告组件\n\n#### 示例\n\n```js\nvar interstitialAd = qg.createInterstitialAd({\n    posId: \'xxxx\'\n});\n```\n\n\n### InterstitialAd.show()\n\n展示插屏广告\n\n##### 参数\n无\n\n##### 示例\n\n```js\ninterstitialAd.show();\n```\n\n### InterstitialAd.load()\n\n加载插屏广告\n\n##### 参数\n\n无\n\n##### 示例\n\n```js\n//插屏广告自动拉取失败可以手动拉取\ninterstitialAd.load();\n```\n\n### InterstitialAd.onLoad(function callback)\n\n监听插屏广告加载结束事件\n\n#### 参数\n\n| 参数名   | 类型     | 必填 | 说明               |\n| -------- | -------- | ---- | ------------------ |\n| callback | Function | 是   | 监听事件的回调函数 |\n\n### InterstitialAd.offLoad(function callback)\n\n取消监听插屏广告加载结束事件\n\n#### 参数\n\n| 参数名   | 类型     | 必填 | 说明               |\n| -------- | -------- | ---- | ------------------ |\n| callback | Function | 否   | 需要取消的监听回调 |\n\n#### 示例\n\n```js\nvar func = function () {\n  // do something\n};\n// 开始监听\nbannerAd.onLoad(func);\n// 取消监听\nbannerAd.offLoad(func);\n```\n\n### InterstitialAd.onClose(function callback)\n\n监听插屏广告关闭事件\n\n#### 参数\n\n| 参数名   | 类型     | 必填 | 说明               |\n| -------- | -------- | ---- | ------------------ |\n| callback | Function | 是   | 监听事件的回调函数 |\n\n### InterstitialAd.offLoad(function callback)\n\n取消监听插屏广告关闭事件\n\n#### 参数\n\n| 参数名   | 类型     | 必填 | 说明               |\n| -------- | -------- | ---- | ------------------ |\n| callback | Function | 否   | 需要取消的监听回调 |\n\n#### 示例\n\n```js\nvar func = function () {\n  // do something\n};\n// 开始监听\nbannerAd.onClose(func);\n// 取消监听\nbannerAd.offClose(func);\n```\n\n### InterstitialAd.onError(function callback)\n\n监听插屏广告错误事件\n\n#### 参数\n\n| 参数名   | 类型     | 必填 | 说明               |\n| -------- | -------- | ---- | ------------------ |\n| callback | Function | 是   | 监听事件的回调函数 |\n\n#### Object res\n\n| 参数名  | 类型   | 说明     |\n| ------- | ------ | -------- |\n| errMsg  | String | 错误信息 |\n| errCode | number | 错误码   |\n\n### InterstitialAd.offError(function callback)\n\n取消监听插屏广告错误事件\n\n#### 参数\n\n| 参数名   | 类型     | 必填 | 说明               |\n| -------- | -------- | ---- | ------------------ |\n| callback | Function | 否   | 需要取消的监听回调 |\n\n#### 示例\n\n```js\nvar func = function () {\n  // do something\n};\n// 开始监听\nbannerAd.onError(func);\n// 取消监听\nbannerAd.offError(func);\n```\n' },
 { content:
    '# 原生广告\n提供图片等资源供游戏自由绘制的广告\n\n### qg.createNativeAd() `1031+`\n\n\n创建一个内部 原生广告 上下文 NativeAd 对象。\n\n#### 参数\n\n无\n\n#### 返回值\n\nNativeAd 对象\n\n#### 示例\n\n```js\nconst nativeAd = qg.createNativeAd({\'posId\':\'xxx\'})\n```\n\n## NativeAd\n\n原生广告对象，可通过 qg.createNativeAd接口获取。\n\n### 属性\n\n| 属性      | 类型       | 说明  |\n| -------- | -------- | ---- |\n| native_ad_title | string | 广告标题    |\n| native_ad_desc | string | 广告描述   |\n| native_ad_icon_url | string | 广告Icon图片地址    |\n| native_ad_img_url | string | 广告大图图片地址   |\n| native_ad_type | number | 广告类型：1网址类 8快游戏跳转   |\n\n#### 示例\n\n```javascript\n//获取原生广告\nvar nativeAd = qg.createNativeAd({\'posId\':\'xxx\'});\n\n//展示广告时，需调用曝光方法，关系到广告的曝光记录\nnativeAd.onExposure();\n\n\n```\n\n### 方法\n\n\n#### NativeAd.onExposure()\n\n广告曝光\n\n##### 参数\n无\n\n##### 示例\n\n```javascript\n//展示广告时，需调用曝光方法，关系到广告的曝光记录\nnativeAd.onExposure();\n```\n\n#### NativeAd.onClick()\n\n广告点击\n\n##### 参数\n\n无\n\n##### 示例\n\n```javascript\n//用户点击广告时，需调用点击方法，关系到广告的点击记录\nnativeAd.onClick();\n```\n\n### 事件\n\n| 名称           | 描述                                   |\n| -------------- | -------------------------------------- |\n| onLoad          | 监听广告加载结束时的回调                   |\n| offLoad          | 取消监听广告加载结束时的回调                   |\n\n#### 示例\n\n```javascript\nconst fn = function (params) {\n    console.log(\'jswrapper\', JSON.stringify(params))\n}\nnativeAd.onLoad(fn);\nnativeAd.offLoad(fn);\n\n```' },
 { content:
    '# file\r\n\r\n### qg.accessFile(Object object)\r\n\r\n判断文件/目录是否存在，同步方法，接口中使用的URI描述请参考[文件系统](./file-system.md)\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| --- | --- | --- | --- |\r\n| uri | String | 是 | 文件的uri，不能是tmp类型的uri |\r\n\r\n#### 返回值\r\n\r\n| 含义 | 类型 | 内容 |\r\n| --- | --- | --- |\r\n| 文件/目录存在 | String | true |\r\n| 文件/目录不存在 | String | false |\r\n| 参数错误 | Number | 202 |\r\n| I/O错误 | Number | 300 |\r\n\r\n#### 示例\r\n\r\n```javascript\r\nvar res = qg.accessFile({\r\n    uri: \'internal://cache/path/to/file\'\r\n})\r\nconsole.log(`handling result： ${res}`)\r\n```\r\n\r\n### qg.copyFile(Object object)\r\n\r\n将源文件复制一份并存储到指定位置，接口中使用的URI描述请参考[文件系统](./file-system.md)\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| --- | --- | --- | --- |\r\n| srcUri | String | 是 | 源文件的uri |\r\n| dstUri | String | 是 | 目标文件的uri，不能是应用资源路径和tmp类型的uri |\r\n| success | Function | 否 | 成功回调，返回目标文件的uri |\r\n| fail | Function | 否 | 失败回调 |\r\n| complete | Function | 否 | 执行结束后的回调 |\r\n\r\n##### fail返回错误代码\r\n\r\n| 错误码 | 说明 |\r\n| --- | --- |\r\n| 202 | 参数错误 |\r\n| 300 | I/O错误 |\r\n\r\n#### 示例\r\n\r\n```javascript\r\nqg.copyFile({\r\n    srcUri: \'internal://cache/path/to/file\',\r\n    dstUri: \'internal://files/path/to/file\',\r\n    success: function (uri) {\r\n        console.log(`copy success: ${uri}`)\r\n    },\r\n    fail: function (data, code) {\r\n        console.log(`handling fail, code = ${code}`)\r\n    }\r\n})\r\n```\r\n\r\n### qg.moveFile(Object object)\r\n\r\n将源文件移动到指定位置，接口中使用的URI描述请参考[文件系统](./file-system.md)\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| --- | --- | --- | --- |\r\n| srcUri | String | 是 | 源文件的uri，不能是应用资源路径和tmp类型的uri |\r\n| dstUri | String | 是 | 目标文件的uri，不能是应用资源路径和tmp类型的uri |\r\n| success | Function | 否 | 成功回调，返回目标文件的uri |\r\n| fail | Function | 否 | 失败回调 |\r\n| complete | Function | 否 | 执行结束后的回调 |\r\n\r\n##### fail返回错误代码\r\n\r\n| 错误码 | 说明 |\r\n| --- | --- |\r\n| 202 | 参数错误 |\r\n| 300 | I/O错误 |\r\n\r\n#### 示例\r\n\r\n```javascript\r\nqg.moveFile({\r\n    srcUri: \'internal://cache/path/to/file\',\r\n    dstUri: \'internal://files/path/to/file\',\r\n    success: function (uri) {\r\n        console.log(`move success: ${uri}`)\r\n    },\r\n    fail: function (data, code) {\r\n        console.log(`handling fail, code = ${code}`)\r\n    }\r\n})\r\n```\r\n\r\n### qg.getFileInfo(Object object)\r\n\r\n获取本地文件的文件信息，接口中使用的URI描述请参考[文件系统](./file-system.md)\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| --- | --- | --- | --- |\r\n| uri | String | 是 | 文件的uri，不能是tmp类型的uri |\r\n| success | Function | 否 | 成功回调，返回{uri:\'file1\', length:123456, lastModifiedTime:1233456} |\r\n| fail | Function | 否 | 失败回调 |\r\n| complete | Function | 否 | 执行结束后的回调 |\r\n\r\n##### success回调参数：Object data\r\n\r\n| 属性 | 类型 | 说明 |\r\n| --- | --- | --- |\r\n| uri | String | 文件的uri，该uri可以被其他api |\r\n| length | Number | 文件大小，单位B |\r\n| lastModifiedTime | Number | 文件的保存是的时间戳，从1970/01/01 08:00:00 到当前时间的秒数 |\r\n\r\n##### fail返回错误代码\r\n\r\n| 错误码 | 说明 |\r\n| --- | --- |\r\n| 202 | 参数错误 |\r\n| 300 | I/O错误 |\r\n\r\n#### 示例\r\n\r\n```javascript\r\nqg.getFileInfo({\r\n    uri: \'internal://files/path/to/file\',\r\n    success: function (data) {\r\n        console.log(data.uri);\r\n        console.log(data.length);\r\n        console.log(data.lastModifiedTime);\r\n    },\r\n    fail: function (data, code) {\r\n        console.log(`handling fail, code = ${code}`)\r\n    }\r\n})\r\n```\r\n\r\n### qg.listDir(Object object)\r\n\r\n获取指定目录下的文件列表，接口中使用的URI描述请参考[文件系统](./file-system.md)\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| --- | --- | --- | --- |\r\n| uri | String | 是 | 目录uri，不能是文件的uri，也不能是tmp类型的uri |\r\n| success | Function | 否 | 成功回调，返回{fileList:\\[{uri:\'file1\',lastModifiedTime:1234456, length:123456} ...\\]} |\r\n| fail | Function | 否 | 失败回调 |\r\n| complete | Function | 否 | 执行结束后的回调 |\r\n\r\n##### success回调参数：Object data\r\n\r\n| 属性 | 类型 | 说明 |\r\n| --- | --- | --- |\r\n| fileList | Array.\\<Object\\> | 文件列表，每个文件的格式为{uri:\'file1\',lastModifiedTime:1234456, length:123456} |\r\n\r\n##### data.fileList每个文件的元信息\r\n\r\n| 属性 | 类型 | 说明 |\r\n| --- | --- | --- |\r\n| uri | String | 文件的uri，该uri可以被其他api访问 |\r\n| length | Number | 文件大小，单位B |\r\n| lastModifiedTime | Number | 文件的保存是的时间戳，从 1970/01/01 00:00:00 GMT 到当前时间的毫秒数 |\r\n\r\n##### fail返回错误代码\r\n\r\n| 错误码 | 说明 |\r\n| --- | --- |\r\n| 202 | 参数错误 |\r\n| 300 | I/O错误 |\r\n\r\n#### 示例\r\n\r\n```javascript\r\nqg.listDir({\r\n    uri: \'internal://files/movies/\',\r\n    success: function (data) {\r\n        console.log(data.fileList)\r\n    },\r\n    fail: function (data, code) {\r\n        console.log(`handling fail, code = ${code}`)\r\n    }\r\n})\r\n```\r\n\r\n### qg.deleteFile(Object object)\r\n\r\n删除本地存储的文件，接口中使用的URI描述请参考[文件系统](./file-system.md)\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| --- | --- | --- | --- |\r\n| uri | String | 是 | 需要删除的文件uri，不能是应用资源路径和tmp类型的uri |\r\n| success | Function | 否 | 成功回调 |\r\n| fail | Function | 否 | 失败回调 |\r\n| complete | Function | 否 | 执行结束后的回调 |\r\n\r\n##### fail返回错误代码\r\n\r\n| 错误码 | 说明 |\r\n| --- | --- |\r\n| 202 | 参数错误 |\r\n| 300 | I/O错误 |\r\n\r\n#### 示例\r\n\r\n```javascript\r\nqg.deleteFile({\r\n    uri: \'internal://files/path/to/file\',\r\n    success: function (data) {\r\n        console.log(\'handling success\')\r\n    },\r\n    fail: function (data, code) {\r\n        console.log(`handling fail, code = ${code}`)\r\n    }\r\n})\r\n```\r\n\r\n### qg.readFile(Object object)\r\n\r\n读取本地文件内容，接口中使用的URI描述请参考[文件系统](./file-system.md)\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| --- | --- | --- | --- |\r\n| uri | String | 是 | 需要读取的本地文件uri，不能是tmp类型的uri |\r\n| encoding | String | 否 | 编码格式，encoding 的合法值: utf8，binary。默认 utf8 |\r\n| position `1031+` | Number | 否 | 读取二进制数据的起始位置，默认值为文件的起始位置 |\r\n| length `1031+` | Number | 否 | 读取二进制的长度，不填写则读取到文件结尾 |\r\n| success | Function | 否 | 成功回调 |\r\n| fail | Function | 否 | 失败回调 |\r\n| complete | Function | 否 | 执行结束后的回调 |\r\n\r\n##### success回调参数：Object data\r\n\r\n| 属性 | 类型 | 说明 |\r\n| --- | --- | --- |\r\n| text | String/ArrayBuffer | 读取的文本或二进制数据 |\r\n\r\n##### fail返回错误代码\r\n\r\n| 错误码 | 说明 |\r\n| --- | --- |\r\n| 202 | 参数错误 |\r\n| 300 | I/O错误 |\r\n| 301 | 文件不存在 |\r\n\r\n#### 示例\r\n\r\n```javascript\r\nqg.readFile({\r\n    uri: \'internal://files/work/demo.txt\',\r\n    encoding: \'utf8\',\r\n    success: function (data) {\r\n        console.log(\'text: \'+ data.text)\r\n    },\r\n    fail: function (data, code) {\r\n        console.log(`handling fail, code = ${code}`)\r\n    }\r\n})\r\n```\r\n### qg.readFileSync(Object object) `1031+`\r\n\r\nqg.readFile(Object object) 的同步版本，接口中使用的URI描述请参考[文件系统](./file-system.md)\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| --- | --- | --- | --- |\r\n| uri | String | 是 | 需要读取的本地文件uri，不能是tmp类型的uri |\r\n| encoding | String | 否 | 编码格式，encoding 的合法值: utf8，binary。默认 utf8 |\r\n| position | Number | 否 | 读取二进制数据的起始位置，默认值为文件的起始位置 |\r\n| length | Number | 否 | 读取二进制的长度，不填写则读取到文件结尾 |\r\n\r\n#### 返回值\r\n\r\n读文件成功将返回一个 Object 类型的对象\r\n\r\n| 属性 | 类型 | 说明 |\r\n| --- | --- | --- |\r\n| text | String/ArrayBuffer | 读取的文本或二进制数据 |\r\n\r\n读文件失败将返回失败原因，类型是 String\r\n\r\n#### 示例\r\n\r\n```javascript\r\nconst result = qg.readFileSync({\r\n    uri: \'internal://files/work/demo.txt\',\r\n    encoding: \'utf8\'\r\n})\r\n\r\nif (typeof result === \'string\') {\r\n    console.log(`handling fail, error message = ${result}`)\r\n}\r\nelse {\r\n    console.log(\'handling success, text: \'+ result.text)\r\n}\r\n```\r\n\r\n### qg.writeFile(Object object)\r\n\r\n写文本到本地文件，接口中使用的URI描述请参考[文件系统](./file-system.md)\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| --- | --- | --- | --- |\r\n| uri | String | 是 | 需要写入的文件uri，不能是应用资源路径和tmp类型的uri |\r\n| text | String/ArrayBuffer | 是 | 需要写入的字符串或二进制数据 |\r\n| encoding | String | 否 | 编码格式，encoding 的合法值: utf8，binary。默认 utf8 |\r\n| position `1031+` | Number | 否 | 指向文件开始写入二进制数据的位置的偏移量，默认 0 |\r\n| success | Function | 否 | 成功回调 |\r\n| fail | Function | 否 | 失败回调 |\r\n| complete | Function | 否 | 执行结束后的回调 |\r\n\r\n##### fail返回错误代码\r\n\r\n| 错误码 | 说明 |\r\n| --- | --- |\r\n| 202 | 参数错误 |\r\n| 300 | I/O错误 |\r\n\r\n#### 示例\r\n\r\n```javascript\r\nqg.writeFile({\r\n    uri: \'internal://files/work/demo.txt\',\r\n    text: \'test\',\r\n    success: function (uri) {\r\n        console.log(`handling success: ${uri}`)\r\n    },\r\n    fail: function (data, code) {\r\n        console.log(`handling fail, code = ${code}`)\r\n    }\r\n})\r\n```\r\n\r\n### qg.writeFileSync(Object object) `1031+`\r\n\r\nqg.writeFile(Object object)的同步版本，接口中使用的URI描述请参考[文件系统](./file-system.md)\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| --- | --- | --- | --- |\r\n| uri | String | 是 | 需要写入的文件uri，不能是应用资源路径和tmp类型的uri |\r\n| text | String/ArrayBuffer | 是 | 需要写入的字符串或二进制数据 |\r\n| encoding | String | 否 | 编码格式，encoding 的合法值: utf8，binary。默认 utf8 |\r\n| position | Number | 否 | 指向文件开始写入二进制数据的位置的偏移量，默认 0 |\r\n\r\n#### 返回值\r\n\r\n一个字符串，如果字符串等于\'success\'表示写文件成功，否则，表示写文件失败的原因。\r\n\r\n#### 示例\r\n\r\n```javascript\r\nconst result = qg.writeFileSync({\r\n    uri: \'internal://files/work/demo.txt\',\r\n    text: \'test\'\r\n})\r\n\r\nif (result === \'success\') {\r\n    console.log(`handling success`)\r\n}\r\nelse {\r\n    console.log(`handling fail, result = ${result}`)\r\n}\r\n```\r\n\r\n### qg.appendFile(Object object)\r\n\r\n在文件结尾追加内容，接口中使用的URI描述请参考[文件系统](./file-system.md)\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| --- | --- | --- | --- |\r\n| uri | String | 是 | 需要追加的文件uri，不能是应用资源路径和tmp类型的uri |\r\n| text | String/ArrayBuffer  | 是 | 需要追加的字符串或二进制数据 |\r\n| encoding | String | 否 | 编码格式，encoding 的合法值: utf8，binary。默认 utf8 |\r\n| success | Function | 否 | 成功回调 |\r\n| fail | Function | 否 | 失败回调 |\r\n| complete | Function | 否 | 执行结束后的回调 |\r\n\r\n##### fail返回错误代码\r\n\r\n| 错误码 | 说明 |\r\n| --- | --- |\r\n| 202 | 参数错误 |\r\n| 300 | I/O错误 |\r\n\r\n#### 示例\r\n\r\n```javascript\r\nqg.appendFile({\r\n    uri: \'internal://files/work/demo.txt\',\r\n    text: \'test\',\r\n    success: function (uri) {\r\n        console.log(`handling success: ${uri}`)\r\n    },\r\n    fail: function (data, code) {\r\n        console.log(`handling fail, code = ${code}`)\r\n    }\r\n})\r\n```\r\n\r\n### qg.mkdir(Object object)\r\n\r\n创建目录，接口中使用的URI描述请参考[文件系统](./file-system.md)\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| --- | --- | --- | --- |\r\n| uri | String | 是 | 需要创建的目录uri，不能是应用资源路径和tmp类型的uri |\r\n| success | Function | 否 | 成功回调 |\r\n| fail | Function | 否 | 失败回调 |\r\n| complete | Function | 否 | 执行结束后的回调 |\r\n\r\n##### fail返回错误代码\r\n\r\n| 错误码 | 说明 |\r\n| --- | --- |\r\n| 202 | 参数错误 |\r\n| 300 | I/O错误 |\r\n\r\n#### 示例\r\n\r\n```javascript\r\nqg.mkdir({\r\n    uri: \'internal://files/path/\',\r\n    success: function (uri) {\r\n        console.log(`handling success: ${uri}`)\r\n    },\r\n    fail: function (data, code) {\r\n        console.log(`handling fail, code = ${code}`)\r\n    }\r\n})\r\n```\r\n\r\n### qg.rmdir(Object object)\r\n\r\n删除目录，接口中使用的URI描述请参考[文件系统](./file-system.md)\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| --- | --- | --- | --- |\r\n| uri | String | 是 | 需要删除的目录uri，不能是应用资源路径和tmp类型的uri |\r\n| success | Function | 否 | 成功回调 |\r\n| fail | Function | 否 | 失败回调 |\r\n| complete | Function | 否 | 执行结束后的回调 |\r\n\r\n##### fail返回错误代码\r\n\r\n| 错误码 | 说明 |\r\n| --- | --- |\r\n| 202 | 参数错误 |\r\n| 300 | I/O错误 |\r\n\r\n#### 示例\r\n\r\n```javascript\r\nqg.rmdir({\r\n    uri: \'internal://files/path/\',\r\n    success: function (uri) {\r\n        console.log(`handling success: ${uri}`)\r\n    },\r\n    fail: function (data, code) {\r\n        console.log(`handling fail, code = ${code}`)\r\n    }\r\n})\r\n```\r\n\r\n### qg.isDirectory(Object object)\r\n\r\n判断是否为目录，同步接口，接口中使用的URI描述请参考[文件系统](./file-system.md)\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 参数名 | 类型 | 必填 | 说明 |\r\n| --- | --- | --- | --- |\r\n| uri | String | 是 | 需要检查的uri，不能是tmp类型的uri |\r\n\r\n#### 返回值\r\n\r\n| 含义 | 类型 | 内容 |\r\n| --- | --- | --- |\r\n| 是目录 | String | true |\r\n| 不是目录 | String | false |\r\n| 参数错误 | int | 202 |\r\n| I/O错误 | int | 300 |\r\n\r\n#### 示例\r\n\r\n```javascript\r\nvar res = qg.isDirectory({\r\n    uri: \'internal://files/path/\'\r\n})\r\nconsole.log(`handling result： ${res}`)\r\n```\r\n\r\n### qg.isFile(Object object)\r\n\r\n判断是否为文件，同步接口，接口中使用的URI描述请参考[文件系统](./file-system.md)\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| --- | --- | --- | --- |\r\n| uri | String | 是 | 需要检查的uri，不能是tmp类型的uri |\r\n\r\n#### 返回值\r\n\r\n| 含义 | 类型 | 内容 |\r\n| --- | --- | --- |\r\n| 是目录 | String | true |\r\n| 不是目录 | String | false |\r\n| 参数错误 | int | 202 |\r\n| I/O错误 | int | 300 |\r\n\r\n#### 示例\r\n\r\n```javascript\r\nvar res = qg.isFile({\r\n    uri: \'internal://files/path/\'\r\n})\r\nconsole.log(`handling result： ${res}`)\r\n```\r\n\r\n### qg.renameFile(Object object)\r\n\r\n重命名文件，接口中使用的URI描述请参考[文件系统](./file-system.md)\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| --- | --- | --- | --- |\r\n| srcUri | String | 是 | 源文件的uri，不能是应用资源路径和tmp类型的uri |\r\n| dstUri | String | 是 | 目标文件的uri，不能是应用资源路径和tmp类型的uri |\r\n| success | Function | 否 | 成功回调 |\r\n| fail | Function | 否 | 失败回调 |\r\n| complete | Function | 否 | 执行结束后的回调 |\r\n\r\n##### fail返回错误代码\r\n\r\n| 错误码 | 说明 |\r\n| --- | --- |\r\n| 202 | 参数错误 |\r\n| 300 | I/O错误 |\r\n\r\n#### 示例\r\n\r\n```javascript\r\nqg.renameFile({\r\n    srcUri: \'internal://files/path/to/file.txt\',\r\n    dstUri: \'internal://files/path/to/rename.txt\',\r\n    success: function (uri) {\r\n        console.log(`handling success: ${uri}`)\r\n    },\r\n    fail: function (data, code) {\r\n        console.log(`handling fail, code = ${code}`)\r\n    }\r\n})\r\n```\r\n\r\n### qg.unzipFile(Object object)\r\n\r\n文件解压，接口中使用的URI描述请参考[文件系统](./file-system.md)\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| --- | --- | --- | --- |\r\n| srcUri | String | 是 | 源文件的uri，不能是tmp类型的uri |\r\n| dstUri | String | 是 | 目标文件的uri，不能是应用资源路径和tmp类型的uri |\r\n| success | Function | 否 | 成功回调 |\r\n| fail | Function | 否 | 失败回调 |\r\n| complete | Function | 否 | 执行结束后的回调 |\r\n\r\n##### fail返回错误代码\r\n\r\n| 错误码 | 说明 |\r\n| --- | --- |\r\n| 202 | 参数错误 |\r\n| 300 | I/O错误 |\r\n\r\n#### 示例\r\n\r\n```javascript\r\nqg.unzipFile({\r\n    srcUri: \'internal://cache/path/to/file\',\r\n    dstUri: \'internal://files/path/to/\',\r\n    success: function (uri) {\r\n        console.log(`handling success: ${uri}`)\r\n    },\r\n    fail: function (data, code) {\r\n        console.log(`handling fail, code = ${code}`)\r\n    }\r\n})\r\n```\r\n\r\n\r\n\r\n' },
 { content:
    '# storage\r\n\r\n### qg.getStorage(Object object)\r\n\r\n异步读取存储内容\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| --- | --- | --- | --- |\r\n| key | String | 是 | 索引 |\r\n| default | String | 否 | 如果key不存在，返回default。如果default未指定，返回长度为0的空字符串 |\r\n| success | Function | 否 | 成功回调 |\r\n| fail | Function | 否 | 失败回调 |\r\n| complete | Function | 否 | 执行结束后的回调 |\r\n\r\n##### success回调参数\r\n\r\nkey对应的存储内容\r\n\r\n#### 示例\r\n\r\n```javascript\r\nqg.getStorage({\r\n  key: \'keyA\',\r\n  success: function (data) {\r\n    console.log(\'handling success\')\r\n  },\r\n  fail: function (data, code) {\r\n    console.log(`handling fail, code = ${code}`)\r\n  }\r\n})\r\n```\r\n\r\n### qg.setStorage(Object object)\r\n\r\n异步添加或修改存储内容\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| --- | --- | --- | --- |\r\n| key | String | 是 | 索引 |\r\n| value | String | 否 | 新值。如果新值是长度为0的空字符串，会删除以key为索引的数据项 |\r\n| success | Function | 否 | 成功回调 |\r\n| fail | Function | 否 | 失败回调 |\r\n| complete | Function | 否 | 执行结束后的回调 |\r\n\r\n#### 示例\r\n\r\n```javascript\r\nqg.setStorage({\r\n  key: \'keyA\',\r\n  value: \'ValueA\',\r\n  success: function (data) {\r\n    console.log(\'handling success\')\r\n  },\r\n  fail: function (data, code) {\r\n    console.log(`handling fail, code = ${code}`)\r\n  }\r\n})\r\n```\r\n\r\n### qg.deleteStorage(Object object)\r\n\r\n异步删除存储内容\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| --- | --- | --- | --- |\r\n| key | String | 是 | 索引 |\r\n| success | Function | 否 | 成功回调 |\r\n| fail | Function | 否 | 失败回调 |\r\n| complete | Function | 否 | 执行结束后的回调 |\r\n\r\n#### 示例\r\n\r\n```javascript\r\nqg.deleteStorage({\r\n  key: \'keyA\',\r\n  success: function (data) {\r\n    console.log(\'handling success\')\r\n  },\r\n  fail: function (data, code) {\r\n    console.log(`handling fail, code = ${code}`)\r\n  }\r\n})\r\n```\r\n\r\n### qg.clearStorage(Object object)\r\n\r\n异步清空存储内容\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| --- | --- | --- | --- |\r\n| success | Function | 否 | 成功回调 |\r\n| fail | Function | 否 | 失败回调 |\r\n| complete | Function | 否 | 执行结束后的回调 |\r\n\r\n#### 示例\r\n\r\n```javascript\r\nqg.clearStorage({\r\n  success: function (data) {\r\n    console.log(\'handling success\')\r\n  },\r\n  fail: function (data, code) {\r\n    console.log(`handling fail, code = ${code}`)\r\n  }\r\n})\r\n```\r\n### qg.getStorageInfo(Object object)\r\n\r\n异步获取当前storage的相关信息\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 参数名 | 类型 | 必填 | 说明 |\r\n| --- | --- | --- | --- |\r\n| success | Function | 否 | 成功回调 |\r\n| fail | Function | 否 | 失败回调 |\r\n| complete | Function | 否 | 执行结束后的回调 |\r\n\r\n##### success回调参数：Object data\r\n\r\n| 属性 | 类型 | 说明 |\r\n| --- | --- | --- |\r\n| keys | Array| 当前 storage 中所有的 key |\r\n| currentSize | number | 当前占用的空间大小, 单位 KB |\r\n| limitSize | number | 限制的空间大小，单位 KB |\r\n\r\n#### 示例\r\n\r\n```javascript\r\nqg.getStorageInfo({\r\n  success: function (data) {\r\n    console.log(\'handling success, currentSize=\' + data.currentSize)\r\n  },\r\n  fail: function (data, code) {\r\n    console.log(`handling fail, code = ${code}`)\r\n  }\r\n})\r\n```\r\n\r\n### qg.getStorageSync(Object object)\r\n\r\n同步读取存储内容\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| --- | --- | --- | --- |\r\n| key | String | 是 | 索引 |\r\n| default | String | 否 | 如果key不存在，返回default。如果default未指定，返回长度为0的空字符串 |\r\n\r\n#### 返回值\r\n\r\n| 含义 | 类型 | 内容 |\r\n| --- | --- | --- |\r\n| 参数传递错误 | String | key not define |\r\n| 读取成功 | String | 参数key对应的值 |\r\n\r\n#### 示例\r\n\r\n```javascript\r\nvar result = qg.getStorageSync({\r\n  key: \'keyB\'\r\n})\r\nconsole.log(\'keyB =\' + result)\r\n```\r\n\r\n### qg.setStorageSync(Object object)\r\n\r\n同步插入或者修改存储内容\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| --- | --- | --- | --- |\r\n| key | String | 是 | 索引 |\r\n| value | String | 否 | 新值。如果新值是长度为0的空字符串，会删除以key为索引的数据项 |\r\n\r\n#### 返回值\r\n\r\n| 含义 | 类型 | 内容 |\r\n| --- | --- | --- |\r\n| 参数传递错误 | String | key not define |\r\n| 插入成功 | String | success |\r\n\r\n#### 示例\r\n\r\n```javascript\r\nvar result = qg.setStorageSync({\r\n  key: \'keyB\'\r\n})\r\nconsole.log(\'setStorageSync \' + result)\r\n```\r\n\r\n### qg.deleteStorageSync(Object object)\r\n\r\n同步删除存储内容\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| --- | --- | --- | --- |\r\n| key | String | 是 | 索引 |\r\n\r\n#### 返回值\r\n\r\n| 含义 | 类型 | 内容 |\r\n| --- | --- | --- |\r\n| 参数传递错误 | String | key not define |\r\n| 删除成功 | String | success |\r\n\r\n#### 示例\r\n\r\n```javascript\r\nvar result = qg.deleteStorageSync({\r\n  key: \'keyB\'\r\n})\r\nconsole.log(\'deleteStorageSync\' + result)\r\n```\r\n\r\n### qg.clearStorageSync()\r\n\r\n同步删除所有存储内容\r\n\r\n#### 参数\r\n\r\n无\r\n\r\n#### 返回值\r\n\r\n无\r\n\r\n#### 示例\r\n\r\n```javascript\r\nqg.clearStorageSync()\r\n```\r\n\r\n### qg.getStorageInfoSync()\r\n\r\n同步获取当前storage的相关信息\r\n\r\n#### 参数\r\n\r\n无\r\n\r\n#### 返回值\r\n\r\nObject data\r\n\r\n| 属性 | 类型 | 说明 |\r\n| --- | --- | --- |\r\n| keys | Array | 当前 storage 中所有的 key |\r\n| currentSize | number | 当前占用的空间大小, 单位 KB |\r\n| limitSize | number | 限制的空间大小，单位 KB |\r\n\r\n#### 示例：\r\n\r\n```javascript\r\nvar data = qg.getStorageInfo()\r\nconsole.log("keys = " + data.keys)\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n' },
 { content:
    '# 传感器\r\n\r\n### qg.subscribeAccelerometer(Object object)\r\n\r\n监听重力感应数据。如果多次调用，仅最后一次调用生效\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| :--- | :--- | :--- | :--- |\r\n| callback | Function | 是 | 重力感应数据变化后会回调此函数，5次每秒 |\r\n\r\n##### callback回调参数：Object data\r\n\r\n| 属性 | 类型 | 说明 |\r\n| :--- | :--- | :--- |\r\n| x | Number | x轴坐标 |\r\n| y | Number | y轴坐标 |\r\n| z | Number | z轴坐标 |\r\n\r\n#### 示例：\r\n\r\n```js\r\nqg.subscribeAccelerometer({\r\n  callback: function (data) {\r\n    console.log(`handling callback, x = ${data.x}, y = ${data.y}, z = ${data.z}`)\r\n  }\r\n})\r\n```\r\n\r\n### qg.unsubscribeAccelerometer()\r\n\r\n取消监听重力感应数据\r\n\r\n#### 参数\r\n\r\n无\r\n\r\n#### 示例\r\n\r\n```js\r\nqg.unsubscribeAccelerometer()\r\n```\r\n\r\n### qg.subscribeCompass(Object object)\r\n\r\n监听罗盘数据。如果多次调用，仅最后一次调用生效\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| :--- | :--- | :--- | :--- |\r\n| callback | Function | 是 | 重力感应数据变化后会回调此函数，5次每秒 |\r\n\r\n##### callback回调参数：Object data\r\n\r\n| 属性 | 类型 | 说明 |\r\n| :--- | :--- | :--- |\r\n| direction | Number | 面对的方向度数 |\r\n\r\n#### 示例\r\n\r\n```js\r\nqg.subscribeCompass({\r\n  callback: function (data) {\r\n    console.log(`handling callback, direction = ${data.direction}`)\r\n  }\r\n})\r\n```\r\n\r\n### qg.unsubscribeCompass()\r\n\r\n取消监听罗盘数据\r\n\r\n#### 参数\r\n\r\n无\r\n\r\n#### 示例\r\n\r\n```js\r\nqg.unsubscribeCompass()\r\n```\r\n\r\n  \r\n\r\n\r\n' },
 { content:
    '# 电量信息\r\n\r\n### qg.getBatteryInfo(Object object)\r\n\r\n获取设备的电量信息\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| :--- | :--- | :--- | :--- |\r\n| success | Function | 否 | 成功回调 |\r\n| fail | Function | 否 | 失败回调 |\r\n| complete | Function | 否 | 执行结束后的回调 |\r\n\r\n##### success回调参数：Object data\r\n\r\n| 属性 | 类型 | 说明 |\r\n| :--- | :--- | :--- |\r\n| charging | Boolean | 是否正在充电。 |\r\n| level | Number | 当前电量，0.0 - 1.0 之间。 |\r\n\r\n#### 示例\r\n\r\n```js\r\nqg.getBatteryInfo({\r\n  success: function (data) {\r\n    console.log(`handling success: ${data.level}`)\r\n  },\r\n  fail: function (data, code) {\r\n    console.log(`handling fail, code = ${code}`)\r\n  }\r\n})\r\n```\r\n\r\n### qg.getBatteryInfoSync()\r\n\r\n获取设备的电量信息的同步版本\r\n\r\n#### 参数\r\n\r\n无\r\n\r\n#### 返回值\r\n\r\nObject data \r\n\r\n| 属性 | 类型 | 说明 |\r\n| :--- | :--- | :--- |\r\n| charging | Boolean | 是否正在充电。 |\r\n| level | Number | 当前电量，0.0 - 1.0 之间。 |\r\n\r\n#### 示例\r\n\r\n```js\r\nvar data = qg.getBatteryInfoSync()\r\nconsole.log(data.level)\r\n```\r\n\r\n\r\n\r\n' },
 { content:
    '# 屏幕亮度\r\n\r\n### qg.getScreenBrightness(Object object)\r\n\r\n获得当前屏幕亮度值\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| :--- | :--- | :--- | :--- |\r\n| success | Function | 否 | 成功回调 |\r\n| fail | Function | 否 | 失败回调 |\r\n| complete | Function | 否 | 执行结束后的回调 |\r\n\r\n##### success回调参数：Object data\r\n\r\n| 属性 | 类型 | 说明 |\r\n| :--- | :--- | :--- |\r\n| value | Number | 屏幕亮度，取值范围0-255 |\r\n\r\n#### 示例\r\n\r\n```js\r\nqg.getScreenBrightness({\r\n  success:function(data){\r\n    console.log(`handling success, value = ${data.value}`)\r\n  },\r\n  fail: function(data, code){\r\n    console.log(`handling fail, code = ${code}`)\r\n  }\r\n})\r\n```\r\n\r\n### qg.setScreenBrightness(Object object)\r\n\r\n设置当前屏幕亮度值\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| :--- | :--- | :--- | :--- |\r\n| value | Number | 是 | 屏幕亮度，取值范围0-255 |\r\n| success | Function | 否 | 成功回调 |\r\n| fail | Function | 否 | 失败回调 |\r\n| complete | Function | 否 | 执行结束后的回调 |\r\n\r\n#### 示例\r\n\r\n```js\r\nqg.setScreenBrightness({\r\n  value: 100,\r\n  success: function () {\r\n    console.log(\'handling success\')\r\n  },\r\n  fail: function (data, code) {\r\n    console.log(`handling fail, code = ${code}`)\r\n  }\r\n})\r\n```\r\n\r\n### qg.getScreenBrightnessMode(Object object)\r\n\r\n获得当前屏幕亮度模式\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| :--- | :--- | :--- | :--- |\r\n| success | Function | 否 | 成功回调 |\r\n| fail | Function | 否 | 失败回调 |\r\n| complete | Function | 否 | 执行结束后的回调 |\r\n\r\n##### success回调参数：Object data\r\n\r\n| 属性 | 类型 | 说明 |\r\n| :--- | :--- | :--- |\r\n| mode | Number | 0为手动调节屏幕亮度,1为自动调节屏幕亮度 |\r\n\r\n#### 示例：\r\n\r\n```js\r\nqg.getScreenBrightnessMode({\r\n  success: function (data) {\r\n    console.log(`handling success, mode = ${data.mode}`)\r\n  },\r\n  fail: function (data, code) {\r\n    console.log(`handling fail, code = ${code}`)\r\n  }\r\n})\r\n```\r\n\r\n### qg.setScreenBrightnessMode(Object object)\r\n\r\n设置当前屏幕亮度模式\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| :--- | :--- | :--- | :--- |\r\n| mode | Number | 是 | 0为手动调节屏幕亮度,1为自动调节屏幕亮度 |\r\n| success | Function | 否 | 成功回调 |\r\n| fail | Function | 否 | 失败回调 |\r\n| complete | Function | 否 | 执行结束后的回调 |\r\n\r\n#### 示例\r\n\r\n```js\r\nqg.setScreenBrightnessMode({\r\n  mode: 1,\r\n  success: function () {\r\n    console.log(\'handling success\')\r\n  },\r\n  fail: function (data, code) {\r\n    console.log(`handling fail, code = ${code}`)\r\n  }\r\n})\r\n```\r\n\r\n### qg.setKeepScreenOn(Object object)\r\n\r\n设置是否保持常亮状态。仅在当前vivo小游戏生效，离开vivo小游戏后设置失效。\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| :--- | :--- | :--- | :--- |\r\n| keepSrceenOn | boolean | 是 | 设置是否保持常亮状态 |\r\n| success | Function | 否 | 成功回调 |\r\n| fail | Function | 否 | 失败回调 |\r\n| complete | Function | 否 | 执行结束后的回调 |\r\n\r\n#### 示例\r\n\r\n```js\r\nqg.setKeepScreenOn({\r\n  keepScreenOn: true,\r\n  success: function () {\r\n    console.log(\'handling success\')\r\n  },\r\n  fail: function (data, code) {\r\n    console.log(`handling fail, code = ${code}`)\r\n  }\r\n})\r\n```\r\n\r\n\r\n\r\n' },
 { content:
    '# 剪贴板\r\n\r\n### qg.setClipboardData(Object object)\r\n\r\n修改剪贴板内容\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| :--- | :--- | :--- | :--- |\r\n| text | String | 是 | 需要放到剪切板的内容 |\r\n| success | Function | 否 | 成功回调 |\r\n| fail | Function | 否 | 失败回调 |\r\n| complete | Function | 否 | 执行结束后的回调 |\r\n\r\n#### 示例\r\n\r\n```js\r\nqg.setClipboardData({\r\n  text: \'text\',\r\n  success: function() {\r\n    console.log(`handling success`)\r\n  }\r\n})\r\n```\r\n\r\n### qg.getClipboardData(Object object)\r\n\r\n读取剪贴板内容\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| :--- | :--- | :--- | :--- |\r\n| success | Function | 否 | 成功回调 |\r\n| fail | Function | 否 | 失败回调 |\r\n| complete | Function | 否 | 执行结束后的回调 |\r\n\r\n##### success回调参数：Object data\r\n\r\n| 属性 | 类型 | 说明 |\r\n| :--- | :--- | :--- |\r\n| text | String | 剪切板内容 |\r\n\r\n#### 示例：\r\n\r\n```js\r\nqg.getClipboardData({\r\n  success: function (data) {\r\n    console.log(`handling success: ${data.text}`)\r\n  },\r\n  fail: function (data, code) {\r\n    console.log(`handling fail, code = ${code}`)\r\n  }\r\n})\r\n```\r\n\r\n  \r\n\r\n\r\n' },
 { content:
    '# 地理位置\r\n\r\n### qg.getLocation(Object object)\r\n\r\n获取地理位置\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| :--- | :--- | :--- | :--- |\r\n| timeout | Number | 否 | 设置超时时间，单位是ms，默认值为30000。在权限被系统拒绝或者定位设置不当的情况下，有可能永远不能返回结果，因而需要设置超时。超时后会使用fail回调 |\r\n| success | Function | 是 | 成功回调 |\r\n| fail | Function | 否 | 失败回调，原因可能是用户拒绝 |\r\n| complete | Function | 否 | 执行结束后的回调 |\r\n\r\n##### success回调参数：Object data\r\n\r\n| 属性 | 类型 | 说明 |\r\n| :--- | :--- | :--- |\r\n| longitude | Number | 经度 |\r\n| latitude | Number | 纬度 |\r\n\r\n##### fail返回错误代码\r\n\r\n| 错误码 | 说明 |\r\n| :--- | :--- |\r\n| 201 | 用户拒绝，获取定位权限失败 |\r\n| 204 | 超时返回 |\r\n| 1000 | 系统位置开关关闭 |\r\n\r\n#### 示例\r\n\r\n```js\r\nqg.getLocation({\r\n  success: function (data) {\r\n    console.log(`handling success: longitude = ${data.longitude}, latitude = ${data.latitude}`)\r\n  },\r\n  fail: function (data, code) {\r\n    console.log(`handling fail, code = ${code}`)\r\n  }\r\n})\r\n```\r\n\r\n### qg.getLocationType(Object object)\r\n\r\n获取系统当前支持的定位类型\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| :--- | :--- | :--- | :--- |\r\n| success | Function | 是 | 成功回调 |\r\n| fail | Function | 否 | 失败回调 |\r\n| complete | Function | 否 | 执行结束后的回调 |\r\n\r\n##### success回调参数：Object data\r\n\r\n| 属性 | 类型 | 说明 |\r\n| :--- | :--- | :--- |\r\n| types | Array | 支持的类型\\[\'gps\',\'network\'\\] |\r\n\r\n#### 示例\r\n\r\n```js\r\nqg.getLocationType({\r\n  success: function (data) {\r\n    console.log(`handling success: locationType = ${data.types}`)\r\n  },\r\n  fail: function (data, code) {\r\n    console.log(`handling fail, code = ${code}`)\r\n  }\r\n})\r\n```\r\n\r\n### qg.subscribeLocation(Object object)\r\n\r\n监听地理位置。如果多次调用，仅最后一次调用生效\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| :--- | :--- | :--- | :--- |\r\n| callback | Function | 是 | 每次位置信息发生变化，都会被回调 |\r\n| fail | Function | 否 | 失败回调，原因可能是用户拒绝 |\r\n\r\n##### callback回调参数：Object data\r\n\r\n| 属性 | 类型 | 说明 |\r\n| :--- | :--- | :--- |\r\n| longitude | Number | 经度 |\r\n| latitude | Number | 纬度 |\r\n\r\n##### fail返回错误代码\r\n\r\n| 错误码 | 说明 |\r\n| :--- | :--- |\r\n| 201 | 用户拒绝，获取定位权限失败 |\r\n| 1000 | 系统位置开关关闭 |\r\n\r\n#### 示例\r\n\r\n```js\r\nqg.subscribeLocation({\r\n  callback: function (data) {\r\n    console.log(`handling success: longitude = ${data.longitude}, latitude = ${data.latitude}`)\r\n  },\r\n  fail: function (data, code) {\r\n    console.log(`handling fail, code = ${code}`)\r\n  }\r\n})\r\n```\r\n\r\n### qg.unsubscribeLocation()\r\n\r\n取消监听地理位置\r\n\r\n#### 参数\r\n\r\n无\r\n\r\n#### 示例\r\n\r\n```js\r\nqg.unsubscribeLocation()\r\n```\r\n\r\n\r\n\r\n' },
 { content:
    '# 网络状态\r\n\r\n### qg.getNetworkType(Object object)\r\n\r\n获取网络类型\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| :--- | :--- | :--- | :--- |\r\n| success | Function | 否 | 成功回调 |\r\n| fail | Function | 否 | 失败回调，可能是因为缺乏权限 |\r\n| complete | Function | 否 | 执行结束后的回调 |\r\n\r\n##### success回调参数： Object data\r\n\r\n| 属性 | 类型 | 说明 |\r\n| :--- | :--- | :--- |\r\n| metered | Boolean | 是否按照流量计费 |\r\n| type | String | 网络类型，可能的值为2g，3g，4g，wifi，none |\r\n\r\n#### 示例：\r\n\r\n```js\r\nqg.getNetworkType({\r\n  success: function (data) {\r\n    console.log(`handling success: ${data.type}`)\r\n  }\r\n})\r\n```\r\n\r\n### qg.subscribeNetworkStatus(Object object)\r\n\r\n监听网络连接状态。如果多次调用，仅最后一次调用生效\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| :--- | :--- | :--- | :--- |\r\n| callback | Function | 否 | 每次网络发生变化，都会被回调 |\r\n| fail | Function | 否 | 失败回调，可能是因为缺乏权限 |\r\n\r\n##### callback回调参数：Object data\r\n\r\n| 属性 | 类型 | 说明 |\r\n| :--- | :--- | :--- |\r\n| metered | Boolean | 是否按照流量计费 |\r\n| type | String | 网络类型，可能的值为2g，3g，4g，wifi，none |\r\n\r\n#### 示例：\r\n\r\n```js\r\nqg.subscribeNetworkStatus({\r\n  callback: function (data) {\r\n    console.log(\'handling callback， type=\', data.type)\r\n  }\r\n})\r\n```\r\n\r\n### qg.unsubscribeNetworkStatus()\r\n\r\n取消监听网络连接状态\r\n\r\n#### 参数\r\n\r\n无\r\n\r\n#### 示例\r\n\r\n```js\r\nqg.unsubscribeNetworkStatus()\r\n```\r\n\r\n### qg.getWifiSignalSync()\r\n\r\n获得wifi强度\r\n\r\n#### 返回值\r\n\r\nObject data\r\n\r\n| 属性 | 类型 | 说明 |\r\n| :--- | :--- | :--- |\r\n| value | Number | wifi信号强度，范围0 - 4 |\r\n\r\n#### 示例\r\n\r\n```js\r\nvar data = qg.getWifiSignalSync()\r\nconsole.log(data.value)\r\n```\r\n\r\n\r\n\r\n' },
 { content:
    '# 软键盘\r\n\r\n### qg.showKeyboard(Object object)\r\n\r\n显示键盘\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性 | 类型 | 必填 | 说明 |\r\n| :--- | :--- | :--- | :--- |\r\n| defaultValue | String | 是 | 键盘输入框显示的默认值 |\r\n| maxLength | Number | 是 | 键盘中文本的最大长度 |\r\n| multiple | Boolean | 是 | 是否为多行输入 |\r\n| confirmHold | Boolean | 是 | 当点击完成时键盘是否收起 |\r\n| confirmType | String | 是 | 键盘右下角confirm按钮类型，只影响按钮的文本内容 |\r\n| success | Function | 否 | 成功回调 |\r\n| cancel | Function | 否 | 失败回调 |\r\n| complete | Function | 否 | 执行结束后的回调 |\r\n\r\n##### confirmType 的合法值\r\n\r\n| 值 | 说明 |\r\n| :--- | :--- |\r\n| done | 完成 |\r\n| next | 下一个 |\r\n| search | 搜索 |\r\n| go | 前往 |\r\n| send | 发送 |\r\n\r\n#### 示例\r\n\r\n```js\r\nqg.showKeyboard({\r\n    defaultValue: "vivo小游戏",\r\n    maxLength: 500,\r\n    multiple: true,\r\n    confirmHold: false,\r\n    confirmType: "done"\r\n})\r\n```\r\n\r\n### qg.onKeyboardInput(function callback)\r\n\r\n监听键盘输入\r\n\r\n#### 参数\r\n\r\n| 参数名   | 类型     | 必填 | 说明         |\r\n| -------- | -------- | ---- | ------------ |\r\n| callback | Function | 是   | 监听事件的回调函数 |\r\n\r\n##### callback回调参数: Object data\r\n\r\n| 属性 | 类型 | 说明 |\r\n| :--- | :--- | :--- |\r\n| value | String | 键盘输入的当前值 |\r\n\r\n#### 示例\r\n\r\n```js\r\nvar func = function (data) {\r\n  console.log(data.value)\r\n};\r\n// 开始监听\r\nqg.onKeyboardInput(func);\r\n```\r\n\r\n### qg.offKeyboardInput(function callback)\r\n\r\n取消监听键盘输入\r\n\r\n#### 参数\r\n\r\n| 参数名   | 类型     | 必填 | 说明         |\r\n| -------- | -------- | ---- | ------------ |\r\n| callback | Function | 否   | 需要取消的监听回调 |\r\n注意：参数为空，将取消所有监听\r\n\r\n#### 示例\r\n\r\n```js\r\nvar func = function () {\r\n  // do something\r\n};\r\n// 开始监听\r\nqg.onKeyboardInput(func);\r\n// 取消监听\r\nqg.offKeyboardInput(func);\r\n```\r\n\r\n### qg.onKeyboardConfirm(function callback)\r\n\r\n监听用户点击键盘 Confirm 按钮\r\n\r\n#### 参数\r\n\r\n| 参数名   | 类型     | 必填 | 说明         |\r\n| -------- | -------- | ---- | ------------ |\r\n| callback | Function | 是   | 监听事件的回调函数 |\r\n\r\n##### callback回调参数: Object data\r\n\r\n| 属性 | 类型 | 说明 |\r\n| :--- | :--- | :--- |\r\n| value | String | 键盘输入的当前值 |\r\n\r\n#### 示例\r\n\r\n```js\r\nvar func = function (data) {\r\n  console.log(data.value)\r\n};\r\n// 开始监听\r\nqg.onKeyboardConfirm(func);\r\n```\r\n\r\n### qg.offKeyboardConfirm(function callback)\r\n\r\n取消监听用户点击键盘 Confirm 按钮\r\n\r\n#### 参数\r\n\r\n| 参数名   | 类型     | 必填 | 说明         |\r\n| -------- | -------- | ---- | ------------ |\r\n| callback | Function | 否   | 需要取消的监听回调 |\r\n注意：参数为空，将取消所有监听\r\n\r\n#### 示例\r\n\r\n```js\r\nvar func = function () {\r\n  // do something\r\n};\r\n// 开始监听\r\nqg.onKeyboardConfirm(func);\r\n// 取消监听\r\nqg.offKeyboardConfirm(func);\r\n```\r\n\r\n### qg.onKeyboardComplete(function callback)\r\n\r\n监听键盘收起\r\n\r\n#### 参数\r\n\r\n| 参数名   | 类型     | 必填 | 说明         |\r\n| -------- | -------- | ---- | ------------ |\r\n| callback | Function | 是   | 监听事件的回调函数 |\r\n\r\n##### callback回调参数: Object data\r\n\r\n| 属性 | 类型 | 说明 |\r\n| :--- | :--- | :--- |\r\n| value | String | 键盘输入的当前值 |\r\n\r\n#### 示例\r\n\r\n```js\r\nvar func = function (data) {\r\n  console.log(data.value)\r\n};\r\n// 开始监听\r\nqg.onKeyboardComplete(func);\r\n```\r\n\r\n### qg.offKeyboardComplete(function callback)\r\n\r\n取消监听键盘收起\r\n\r\n#### 参数\r\n\r\n| 参数名   | 类型     | 必填 | 说明         |\r\n| -------- | -------- | ---- | ------------ |\r\n| callback | Function | 否   | 需要取消的监听回调 |\r\n注意：参数为空，将取消所有监听\r\n\r\n#### 示例\r\n\r\n```js\r\nvar func = function () {\r\n  // do something\r\n};\r\n// 开始监听\r\nqg.onKeyboardComplete(func);\r\n// 取消监听\r\nqg.offKeyboardComplete(func);\r\n```\r\n\r\n### qg.hideKeyboard()\r\n\r\n隐藏键盘\r\n\r\n#### 参数：\r\n\r\n无\r\n\r\n#### 示例\r\n\r\n```js\r\nqg.hideKeyboard()\r\n```\r\n\r\n\r\n\r\n' },
 { content:
    '# 弹窗\r\n\r\n### qg.showToast(Object object)\r\n\r\n显示Toast\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性   | 类型   | 必填 | 说明                    |\r\n| :------- | :----- | :--- | :---------------------- |\r\n| message  | String | 是   | 要显示的文本            |\r\n| duration | Number | 否   | 0为短时，1为长时，默认0 |\r\n\r\n#### 示例\r\n\r\n```js\r\nqg.showToast({\r\n  message: \'message\'\r\n})\r\n```\r\n\r\n### qg.showDialog(Object object)\r\n\r\n显示对话框\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性   | 类型     | 必填 | 说明                                                         |\r\n| :------- | :------- | :--- | :----------------------------------------------------------- |\r\n| title    | String   | 否   | 标题                                                         |\r\n| message  | String   | 否   | 内容                                                         |\r\n| buttons  | Array    | 否   | 按钮的数组，按钮结构：{text:\'text\',color:\'\\#333333\'}，color可选：buttons的第1项为positive button；buttons的第2项（如果有）为negative button；buttons的第3项（如果有）为neutral button。最多支持3个button |\r\n| success  | Function | 否   | 成功回调                                                     |\r\n| cancel   | Function | 否   | 取消回调                                                     |\r\n| complete | Function | 否   | 执行结束后的回调                                             |\r\n\r\n##### success回调参数：Object data\r\n\r\n| 属性 | 类型    | 说明                          |\r\n| :----- | :------ | :---------------------------- |\r\n| index  | Number | 选中按钮在buttons数组中的序号 |\r\n\r\n#### 示例\r\n\r\n```js\r\nqg.showDialog({\r\n  title: \'title\',\r\n  message: \'message\',\r\n  buttons: [\r\n    {\r\n      text: \'btn\',\r\n      color: \'#33dd44\'\r\n    }\r\n  ],\r\n  success: function (data) {\r\n    console.log(\'handling callback\')\r\n  },\r\n  cancel: function () {\r\n    console.log(\'handling cancel\')\r\n  },\r\n  fail: function (data, code) {\r\n    console.log(`handling fail, code = ${code}`)\r\n  }\r\n})\r\n```\r\n\r\n### qg.showLoading(Object object)\r\n\r\n显示loading提示框\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性   | 类型     | 必填 | 说明             |\r\n| :------- | :------- | :--- | :--------------- |\r\n| message  | String   | 否   | 要显示的文字     |\r\n| success  | Function | 否   | 成功回调         |\r\n| cancel   | Function | 否   | 取消回调         |\r\n| complete | Function | 否   | 执行结束后的回调 |\r\n\r\n#### 示例\r\n\r\n```js\r\nqg.showLoading({\r\n    message: "loading",\r\n    success: function () {\r\n        console.log(\'handling success\')\r\n    },\r\n    fail: function (data, code) {\r\n        console.log(`handling fail, code = ${code}`)\r\n    }\r\n})\r\n```\r\n\r\n### qg.hideLoading()\r\n\r\n隐藏loading提示框\r\n\r\n#### 参数\r\n\r\n无\r\n\r\n#### 示例\r\n\r\n```js\r\nqg.hideLoading()\r\n```\r\n\r\n\r\n\r\n' },
 { content:
    '# 震动\r\n\r\n### qg.vibrateShort()\r\n\r\n触发较短时间震动，持续15ms\r\n\r\n#### 参数\r\n\r\n无\r\n\r\n#### 示例\r\n\r\n```js\r\nqg.vibrateShort()\r\n```\r\n\r\n### qg.vibrateLong()\r\n\r\n触发较长时间震动，持续400ms\r\n\r\n#### 参数\r\n\r\n无\r\n\r\n#### 示例\r\n\r\n```js\r\nqg.vibrateLong()\r\n```\r\n\r\n\r\n\r\n' },
 { content:
    '# 音频\r\n\r\n\r\n### qg.createInnerAudioContext()\r\n\r\n创建一个内部 audio 上下文 InnerAudioContext 对象。\r\n\r\n#### 参数\r\n\r\n无\r\n\r\n#### 返回值\r\n\r\nInnerAudioContext 对象\r\n\r\n#### 示例\r\n\r\n```js\r\nconst innerAudioContext = qg.createInnerAudioContext()\r\n```\r\n\r\n## InnerAudioContext\r\n\r\nInnerAudioContext 对象，可通过 qg.createInnerAudioContext 接口获取。\r\n\r\n### 属性\r\n\r\n\r\n| 属性      | 类型       | 说明  |\r\n| -------- | -------- | ---- |\r\n| src | string | 设置音频资源的地址    |\r\n| loop | boolean | 设置或获取音频资源是否循环播放   |\r\n| duration | number | 获取当前音频的长度，单位 s。只有在当前有合法的 src 时返回    |\r\n| currentTime | number | 获取当前音频的播放位置，单位 s。只有在当前有合法的 src 时返回，时间不取整，保留小数点后 6 位   |\r\n| paused | boolean | 获取当前是是否暂停或停止状态，true 表示暂停或停止，false 表示正在播放    |\r\n| volume | number | 设置或获取音频的音量，范围 0~1    |\r\n\r\n#### 示例\r\n\r\n```javascript\r\nvar innerAudioContext = qg.createInnerAudioContext()\r\ninnerAudioContext.src = \'/audio.mp3\'\r\ninnerAudioContext.loop = true\r\ninnerAudioContext.volume = 1\r\n```\r\n\r\n::: tip\r\n请先设置src地址后，再调用InnerAudioContext的方法\r\n:::\r\n\r\n### 方法\r\n\r\n#### InnerAudioContext.play()\r\n\r\n播放音频\r\n\r\n##### 参数\r\n\r\n无\r\n\r\n##### 示例\r\n\r\n```javascript\r\ninnerAudioContext.play()\r\n```\r\n\r\n#### InnerAudioContext.seek(number position)\r\n\r\n跳转到指定位置，单位 s\r\n\r\n##### 参数\r\n\r\nnumber position\r\n跳转的时间\r\n\r\n##### 示例\r\n\r\n```javascript\r\ninnerAudioContext.seek(10)\r\n```\r\n\r\n#### InnerAudioContext.pause()\r\n\r\n暂停播放音频\r\n\r\n##### 参数\r\n\r\n无\r\n\r\n##### 示例\r\n\r\n```javascript\r\ninnerAudioContext.pause()\r\n```\r\n\r\n#### InnerAudioContext.stop()\r\n\r\n停止播放音频\r\n\r\n##### 参数\r\n\r\n无\r\n\r\n##### 示例\r\n\r\n```javascript\r\ninnerAudioContext.stop()\r\n```\r\n\r\n### 事件\r\n\r\n| 名称           | 描述                                   |\r\n| -------------- | -------------------------------------- |\r\n| onEnded          | 监听播放结束时的回调                   |\r\n| offEnded          | 取消监听播放结束时的回调                   |\r\n\r\n#### 示例\r\n\r\n```javascript\r\nvar func = function () {\r\n  console.log(`audio current time: ${audio.currentTime}`)\r\n};\r\ninnerAudioContext.onEnded(func);\r\ninnerAudioContext.offEnded(func);\r\n```\r\n\r\n::: tip\r\n请先调用InnerAudioContext.play()方法后，再监听onEnded事件，否则，监听无效\r\n:::' },
 { content:
    '# 多媒体\r\n\r\n### qg.takePhoto(Object object)\r\n\r\n拍摄照片\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性      | 类型       | 必填   | 说明       |\r\n| -------- | -------- | ---- | -------- |\r\n| success  | Function | 否    | 成功回调     |\r\n| fail     | Function | 否    | 失败回调     |\r\n| cancel   | Function | 否    | 取消回调     |\r\n| complete | Function | 否    | 执行结束后的回调 |\r\n\r\n##### success回调参数：Object data\r\n\r\n| 属性  | 类型     | 说明      |\r\n| ---- | ------ | ------- |\r\n| uri  | String | 选取的文件路径 |\r\n\r\n##### fail返回错误代码\r\n\r\n| 错误码  | 说明            |\r\n| ---- | ------------- |\r\n| 201  | 用户拒绝，获取相机权限失败 |\r\n\r\n#### 示例\r\n\r\n```javascript\r\nqg.takePhoto({\r\n  success: function (data) {\r\n    console.log(`handling success: ${data.uri}`)\r\n  },\r\n  fail: function (code) {\r\n    console.log(`handling fail: ${code}`)\r\n  },\r\n})\r\n```\r\n\r\n### qg.pickImage(Object object)\r\n\r\n选择图片\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性      | 类型       | 必填   | 说明       |\r\n| -------- | -------- | ---- | -------- |\r\n| success  | Function | 否    | 成功回调     |\r\n| fail     | Function | 否    | 失败回调     |\r\n| cancel   | Function | 否    | 取消回调     |\r\n| complete | Function | 否    | 执行结束后的回调 |\r\n\r\n##### success回调参数：Object data\r\n\r\n| 属性  | 类型     | 说明      |\r\n| ---- | ------ | ------- |\r\n| uri  | String | 选取的文件路径 |\r\n\r\n#### 示例：\r\n\r\n```javascript\r\nqg.pickImage({\r\n  success: function (data) {\r\n    console.log(`handling success: ${data.uri}`)\r\n  }\r\n})\r\n```\r\n\r\n### qg.saveToPhotosAlbum(Object object)\r\n\r\n将图片/视频保存到相册中．需要用户授权\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性      | 类型       | 必填   | 说明                         |\r\n| -------- | -------- | ---- | -------------------------- |\r\n| uri      | String   | 是    | 源文件的uri，文件的扩展名必须是图片或视频的扩展名 |\r\n| success  | Function | 否    | 成功回调                       |\r\n| fail     | Function | 否    | 失败回调                       |\r\n| complete | Function | 否    | 执行结束后的回调                   |\r\n\r\n##### fail返回错误代码\r\n\r\n| 错误码  | 说明    |\r\n| ---- | ----- |\r\n| 201  | 用户拒绝  |\r\n| 202  | 参数错误  |\r\n| 300  | I/O错误 |\r\n\r\n#### 示例\r\n\r\n```javascript\r\nmedia.saveToPhotosAlbum({\r\n  uri:\'internal://tmp/abc.jpg\',\r\n  success: function () {\r\n    console.log(`save success`)\r\n  },\r\n  fail: function (data, code) {\r\n    console.log(`handling fail, code = ${code}`)\r\n  }\r\n})\r\n```\r\n\r\n### qg.previewImage(Object object)\r\n\r\n图片预览\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性      | 类型       | 必填   | 说明                         |\r\n| -------- | -------- | ---- | -------------------------- |\r\n| uris      | Array.\\<String\\>   | 是    | 源文件的uri，可以是internal路径，也可以是网络url |\r\n| success  | Function | 否    | 成功回调                       |\r\n| fail     | Function | 否    | 失败回调                       |\r\n| complete | Function | 否    | 执行结束后的回调                   |\r\n\r\n##### fail返回错误代码\r\n\r\n| 错误码  | 说明    |\r\n| ---- | ----- |\r\n| 202  | 参数错误  |\r\n\r\n#### 示例\r\n\r\n```javascript\r\nqg.previewImage({\r\n  uris:[\'internal://tmp/abc.jpg\', \'https://shopstatic.vivo.com.cn/vivoshop/commodity/20180813/20180813172027904331_original.jpg\'],\r\n  success: function () {\r\n    console.log(`save success`)\r\n  },\r\n  fail: function (data, code) {\r\n    console.log(`handling fail, code = ${code}`)\r\n  }\r\n})\r\n```' },
 { content:
    '# 录音\r\n\r\n### qg.startRecord(Object object)\r\n\r\n开始录音\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性                   | 类型     | 必填 | 说明                                                         |\r\n| ------------------------ | -------- | ---- | ------------------------------------------------------------ |\r\n| duration        | Number   | 否   | 录音时长，单位为ms。如果duration为有效值将在达到指定值时停止录音 |\r\n| sampleRate        | Number   | 否   | 采样率。不同的音频格式所支持的采样率范围不同。对于aac格式，默认设置为8000，建议使用 8000/16000/44100 |\r\n| numberOfChannels  | Number   | 否   | 录音通道数，有效值 1/2                                       |\r\n| encodeBitRate     | Number   | 否   | 编码码率。编码码率的取值与采样率和音频格式有关。对aac格式，建议按照下表中取值范围来选择编码码率 |\r\n| format            | String   | 否   | 音频格式，有效值 3gpp/amr_nb/aac。缺省为3gpp                 |\r\n| success                  | Function | 否   | 成功回调                                                     |\r\n| fail                     | Function | 否   | 失败回调                                                     |\r\n| complete                 | Function | 否   | 执行结束后的回调                                             |\r\n\r\n##### aac格式采样率及码率建议值对应表\r\n\r\n| 采样率 | 编码码率       |\r\n| ------ | -------------- |\r\n| 8000   | 16000 ~ 48000  |\r\n| 16000  | 24000 ~ 96000  |\r\n| 44100  | 64000 ~ 320000 |\r\n\r\n##### success回调参数：Object data\r\n\r\n| 属性 | 类型   | 说明                                   |\r\n| ------ | ------ | -------------------------------------- |\r\n| uri    | String | 录音文件的存储路径，在应用的缓存目录中 |\r\n\r\n##### fail返回错误代码\r\n\r\n| 错误码 | 说明                           |\r\n| ------ | ------------------------------ |\r\n| 201    | 用户拒绝授权，获取录音权限失败 |\r\n\r\n#### 示例\r\n\r\n```javascript\r\nqg.startRecord({\r\n  duration: 10000,\r\n  sampleRate: 8000,\r\n  numberOfChannels: 1,\r\n  encodeBitRate: 16000,\r\n  format: \'aac\',\r\n  success: function (data) {\r\n    console.log(`handling success: ${data.uri}`)\r\n  },\r\n  fail: function (data, code) {\r\n    console.log(`handling fail, code = ${code}`)\r\n  }\r\n})\r\n```\r\n\r\n### qg.stopRecord(Object object)\r\n\r\n停止录音\r\n\r\n#### 参数\r\n\r\n无\r\n\r\n#### 示例\r\n\r\n```javascript\r\nqg.stopRecord()\r\n```' },
 { content:
    '# 数据请求\r\n\r\n### qg.request(Object object)\r\n\r\n发起网络请求\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性       | 类型     | 必填 | 说明                                                         |\r\n| ------------ | -------- | ---- | ------------------------------------------------------------ |\r\n| url          | String   | 是   | 资源url                                                      |\r\n| header       | Object   | 否   | 请求的header |\r\n| method       | String   | 否   | HTTP 请求方法，默认为GET                               |\r\n| data | String    | 否   | 请求的参数                                |\r\n| dataType | String    | 否   | 返回的数据格式，可以是：json、arraybuffer、string，默认为 json       |\r\n| success      | Function | 否   | 成功返回的回调函数                                           |\r\n| fail         | Function | 否   | 失败的回调函数                                               |\r\n| complete     | Function | 否   | 结束的回调函数（调用成功、失败都会执行）    \r\n\r\n##### method 的合法值\r\n\r\n| 值       |  说明                                                         |\r\n| ------------ | -------- | ---- | ------------------------------------------------------------ |\r\n| GET          | HTTP 请求 GET           \r\n| HEAD          | HTTP 请求 HEAD         \r\n| POST          | HTTP 请求 POST         \r\n| PUT          | HTTP 请求 PUT         \r\n| DELETE          | HTTP 请求 DELETE          \r\n| TRACE          | HTTP 请求 TRACE      \r\n| DELETE          | HTTP 请求 DELETE      \r\n| CONNECT          | HTTP 请求 CONNECT                                                \r\n\r\n##### dataType 的合法值\r\n\r\n| 值       |  说明                                                         |\r\n| ------------ | -------- | ---- | ------------------------------------------------------------ |\r\n| json          | 返回的数据为 JSON，返回后会对返回的数据进行一次 JSON.parse           \r\n| arraybuffer          | 返回的数据为 ArrayBuffer         \r\n| string          | 返回的数据为 String     \r\n\r\n##### success回调参数：Object data\r\n\r\n| 属性      | 类型     | 说明                                                         |\r\n| ------------ | -------- | ---- | ------------------------------------------------------------ |\r\n| data          | String/Object/Arraybuffer   | 返回的数据\r\n| header          | Object   | 返回的 HTTP Response Header\r\n| statusCode          | Number   | 开发者服务器返回的 HTTP 状态码\r\n\r\n##### fail 回调参数\r\n\r\n| 参数名      | 类型     | 说明                                                         |\r\n| ------------ | -------- | ---- | ------------------------------------------------------------ |\r\n| error          | String   | 返回的数据\r\n| code          | Number   | 返回的错误码\r\n\r\n#### 返回值\r\n\r\nRequestTask 对象\r\n\r\n### RequestTask\r\n\r\n网络请求任务对象\r\n\r\n#### RequestTask.abort()\r\n\r\n中断请求任务\r\n\r\n#### 示例\r\n\r\n```javascript\r\nvar requestTask = qg.request({\r\n    url: "http://api.vivo.xyz/mockApi/mock/api/user/isLogin.do",\r\n    dataType: \'string\', // dataType可取值：string, json, arraybuffer, 表示success的回调参数对象ret的data属性是分别是：String 、Object 、ArrayBuffer类型\r\n    success: function(ret) {\r\n        qg.showToast({\r\n            message: " request success " + ret.data\r\n        });\r\n    },\r\n    fail: function(error, code) {\r\n        qg.showToast({\r\n            message: " request fail, errMsg =" + error\r\n        });\r\n    }\r\n});\r\n......\r\nrequestTask.abort();\r\n```' },
 { content:
    '# 上传下载\r\n\r\n### qg.uploadFile(Object object)\r\n\r\n上传文件\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性       | 类型     | 必填 | 说明                                                         |\r\n| ------------ | -------- | ---- | ------------------------------------------------------------ |\r\n| url          | String   | 是   | 资源url                                                      |\r\n| header       | Object   | 否   | 请求的header，会将其所有属性设置到请求的header部分。useragent设置无效。 |\r\n| method       | String   | 否   | 默认为POST，可以是： POST, PUT                               |\r\n| files        | Array    | 是   | 需要上传的文件列表，使用multipart/form-data方式提交          |\r\n| data | Array    | 否   | HTTP请求中其他额外的form data                                |\r\n| success      | Function | 否   | 成功返回的回调函数                                           |\r\n| fail         | Function | 否   | 失败的回调函数                                               |\r\n| complete     | Function | 否   | 结束的回调函数（调用成功、失败都会执行）                     |\r\n\r\n##### files参数\r\n\r\n  files参数是一个file对象的数组，file对象的结构如下：\r\n\r\n| 属性   | 类型   | 必填 | 说明                                                       |\r\n| -------- | ------ | ---- | ---------------------------------------------------------- |\r\n| filename | String | 否   | multipart提交时，header中的文件名                          |\r\n| name     | String | 否   | multipart提交时，表单的项目名,默认file                     |\r\n| uri      | String | 是   | 文件的本地地址                                             |\r\n| type     | String | 否   | 文件的Content-Type格式,默认会根据filename或者uri的后缀获取 |\r\n\r\n##### data参数\r\n\r\ndata参数是一个对象数组，对象的结构如下：\r\n\r\n| 属性 | 类型   | 必填 | 说明             |\r\n| ------ | ------ | ---- | ---------------- |\r\n| name   | String | 是   | form元素的名称。 |\r\n| value  | String | 是   | form元素的值。   |\r\n\r\n##### success回调参数\r\n\r\n| 参数名  | 类型    | 说明                                                         |\r\n| ------- | ------- | ------------------------------------------------------------ |\r\n| code    | Number | 服务器状态code                                               |\r\n| data    | String  | 如果服务器返回的header中type是text/*或application/json、application/javascript、application/xml，值是文本内容，否则是存储的临时文件的uri临时文件如果是图片或者视频内容，可以将图片设置到image或video控件上显示 |\r\n| headers | Object  | 服务器response的所有header                                   |\r\n\r\n#### 示例：\r\n\r\n```javascript\r\nqg.uploadFile({\r\n  url: \'http://www.example.com\',\r\n  files: [\r\n    {\r\n      uri: \'internal://xxx/xxx/test\',\r\n      name: \'file1\',\r\n      filename: \'test.png\'\r\n    }\r\n  ],\r\n  data: [\r\n    {\r\n      name: \'param1\',\r\n      value: \'value1\'\r\n    }\r\n  ],\r\n  success: function (data) {\r\n    console.log(\'handling success\')\r\n  },\r\n  fail: function (data, code) {\r\n    console.log(`handling fail, code = ${code}`)\r\n  }\r\n})\r\n```\r\n\r\n### qg.download(Object object)\r\n\r\n下载文件资源到本地，客户端直接发起一个 HTTP GET 请求，返回文件的本地文件路径。\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性     | 键值类型 | 是否必填 | 说明                                          |\r\n| :------- | :------- | :------- | :-------------------------------------------- |\r\n| url      | string   | 是       | 下载资源的 url                                |\r\n| header   | Object   | 是       | HTTP 请求的 Header，Header 中不能设置 Referer           |\r\n| success  | function | 否       | 接口调用成功的回调函                          |\r\n| fail     | function | 否       | 接口调用失败的回调函数                        |\r\n| complete | function | 否       | 接口调用结束的回调函数                        |\r\n\r\n##### success回调参数：Object data\r\n\r\n| 属性         | 键值类型 | 说明                           |\r\n| :----------- | :------- | :----------------------------- |\r\n| tempFilePath | string   | 临时文件路径                   |\r\n| statusCode   | number   | 开发者服务器返回的 HTTP 状态码 |\r\n\r\n#### 返回值\r\n\r\nDownloadTask 对象\r\n\r\n### DownloadTask\r\n\r\n一个可以监听下载进度变化事件，以及取消下载任务的对象\r\n\r\n#### DownloadTask.abort()\r\n\r\n中断下载任务\r\n\r\n#### DownloadTask.onProgressUpdate(function callback)\r\n\r\n监听下载进度变化事件\r\n\r\n##### callback回调参数：Object data\r\n\r\n| 属性         | 类型 | 说明                           |\r\n| :----------- | :------- | :----------------------------- |\r\n| progress | number   | 下载进度百分比                   |\r\n| totalBytesWritten   | number   | 已经下载的数据长度，单位 Bytes |\r\n| totalBytesExpectedToWrite   | number   | 预期需要下载的数据总长度，单位 Bytes |\r\n\r\n#### 示例\r\n\r\n```javascript\r\nvar downloadTask = qg.download({\r\n  url: \'http://www.example.com\',\r\n  success: function (data) {\r\n    console.log(`handling success, tempFilePath = ${data.tempFilePath}`)\r\n  },\r\n  fail: function (data, code) {\r\n    console.log(`handling fail, code = ${code}`)\r\n  }\r\n});\r\n\r\ndownloadTask.onProgressUpdate(function (msg) {\r\n    var progress = msg["progress"];\r\n    console.log(progress + "%");\r\n});\r\n......\r\ndownloadTask.abort();\r\n```\r\n\r\n::: tip\r\n下载默认存放在临时目录，每次重启游戏会清除临时目录，如果有需要重复使用，建议下载完成之后，把文件转存到其他目录，具体参考 - [文件系统](./../data/file-system.md)。\r\n:::' },
 { content:
    '# WebSocket\r\n\r\n### qg.createWebSocket(Object object)\r\n\r\n创建websocket实例\r\n\r\n#### 参数\r\n\r\nObject object\r\n\r\n| 属性      | 类型       | 必填   | 说明                                       |\r\n| -------- | -------- | ---- | ---------------------------------------- |\r\n| url  | String     | 是    | 请求url， 必须是wss或ws协议 |\r\n| protocols | Array.\\<String\\> | 否    | 子协议组                    |\r\n\r\n#### 返回值\r\n\r\nSocketTask 对象\r\n\r\n#### 示例\r\n\r\n```javascript\r\nconst ws = qg.createWebSocket({\r\n  url:\'wss://echo.websocket.org\',\r\n  protocols:[\'protocols1\']\r\n})\r\n```\r\n:::tip\r\n如果使用的是wss协议，游戏配置文件manifest.json里的minPlatformVersion字段（支持的最小平台版本号）需要设置为 1030\r\n:::\r\n\r\n## SocketTask\r\n\r\n### SocketTask.send(String string)\r\n\r\n使用ws对象发送消息\r\n\r\n#### 参数\r\n\r\n字符串，要发送的消息\r\n\r\n#### 示例\r\n\r\n```javascript\r\nws.send(\'message\');\r\n```\r\n\r\n### SocketTask.close()\r\n\r\n关闭连接\r\n\r\n#### 示例\r\n\r\n```javascript\r\nws.close();\r\n```\r\n\r\n### SocketTask.onopen\r\n\r\n监听websocket连接打开的状态。\r\n\r\n#### 属性值\r\n\r\n| 属性值   | 类型     | 说明         |\r\n| -------- | -------- | ------------ |\r\n| callback | Function | 监听打开连接的回调函数 |\r\n\r\n#### 示例\r\n\r\n```javascript\r\nws.onopen = function(evt){\r\n  console.log(\'onopen\');\r\n};\r\n```\r\n\r\n### SocketTask.onmessage\r\n\r\n消息事件的监听，用于接收服务端发来的message\r\n\r\n#### 属性值\r\n\r\n| 属性值   | 类型     | 说明                   |\r\n| -------- | -------- | ---------------------- |\r\n| callback | Function | 监听服务器返回消息事件的回调函数 |\r\n\r\n##### callback回调参数：Object data\r\n\r\n| 属性 | 类型   | 说明               |\r\n| ------ | ------ | ------------------ |\r\n| data   | String | 监听器接收到的消息 |\r\n\r\n\r\n#### 示例\r\n\r\n```javascript\r\nws.onmessage = function (data) {\r\n  console.log(`message is ${data.data}`)\r\n}\r\n```\r\n\r\n### SocketTask.onclose\r\n\r\n关闭连接的监听。\r\n\r\n#### 属性值\r\n\r\n| 属性值   | 类型     | 说明               |\r\n| -------- | -------- | ------------------ |\r\n| callback | Function | 监听关闭连接事件的回调函数 |\r\n\r\n##### callback回调参数：Object data\r\n\r\n| 属性   | 类型    | 说明                     |\r\n| -------- | ------- | ------------------------ |\r\n| code     | Number  | 服务器返回关闭的状态码。 |\r\n| reason   | String  | 服务器返回的关闭原因。   |\r\n| wasClean | Boolean | 是否正常关闭。           |\r\n\r\n#### 示例\r\n\r\n```javascript\r\nws.onclose = function (data) {\r\n  console.log(`onclose:data.code = ${data.code}, data.reason = ${data.reason}, data.wasClean = ${data.wasClean}`)\r\n}\r\n```\r\n\r\n### SocketTask.onerror\r\n\r\n错误事件的监听器。\r\n\r\n#### 属性值\r\n\r\n| 属性值   | 类型     | 说明         |\r\n| -------- | -------- | ------------ |\r\n| callback | Function | 监听连接错误的回调函数 |\r\n\r\n##### callback回调参数：Object data\r\n\r\n| 属性 | 类型   | 说明                 |\r\n| ------ | ------ | -------------------- |\r\n| data   | String | 监听器接收到的消息。 |\r\n\r\n\r\n#### 示例\r\n\r\n```javascript\r\nws.onerror = function (data) {\r\n  console.log(`onerror data.data = ${data.data}`)\r\n}\r\n```' },
 { content: